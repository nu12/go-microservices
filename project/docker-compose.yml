version: "3"

services:
  front:
    build:
      context: ./../front-end
      dockerfile: ./../front-end/Dockerfile
    restart: always
    ports:
      - "8080:8080"
    deploy:
      mode: replicated
      replicas: 1
  broker:
    build:
      context: ./../broker-service
      dockerfile: ./../broker-service/Dockerfile
    restart: always
    ports:
      - "8081:8080"
    deploy:
      mode: replicated
      replicas: 1

  authentication:
    build:
      context: ./../authentication-service
      dockerfile: ./../authentication-service/Dockerfile
    restart: always
    ports:
      - "8082:8080"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      DSN: "host=postgres port=5432 user=postgres  password=password dbname=users sslmode=disable timezone=UTC connect_timeout=5"

  postgres:
    image: postgres:14.0
    restart: always
    ports:
      - "5432:5432"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=users
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./db-data/users.sql:/docker-entrypoint-initdb.d/init.sql

  logger:
    build:
      context: ./../logger-service
      dockerfile: ./../logger-service/Dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      DSN: "host=postgres port=5432 user=postgres  password=password dbname=users sslmode=disable timezone=UTC connect_timeout=5"

  mongo:
    image: mongo:4.2.16-bionic
    restart: always
    ports:
      - "27017:27017"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      MONGO_INITDB_DATABASE: logs
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - mongo:/data/db
      - ./db-data/users.sql:/docker-entrypoint-initdb.d/init.sql

volumes:
  postgres:
  mongo: